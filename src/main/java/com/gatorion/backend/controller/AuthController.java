package com.gatorion.backend.controller;

import com.gatorion.backend.dto.AuthRequestDTO;
import com.gatorion.backend.dto.AuthResponseDTO;
import com.gatorion.backend.model.Usuario;
import com.gatorion.backend.repository.UsuarioRepository;
import com.gatorion.backend.service.AuthService;
import com.gatorion.backend.service.JwtService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

@RestController
@RequestMapping("/auth")
@CrossOrigin(origins = "http://localhost:5173")
public class AuthController {

    @Autowired
    private AuthService authService;

    @Autowired
    private UsuarioRepository usuarioRepository;

    @Autowired
    private JwtService jwtService;

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody AuthRequestDTO request) {
        try {
            System.out.println("üîê AuthController: Tentativa de login para: " + request.getEmail());

            // ‚úÖ Usar seu AuthService existente para autenticar e obter o token
            String token = authService.autenticar(request);

            // ‚úÖ Decodificar o token para obter o userId
            Integer userId = jwtService.extractUserIdAsInteger(token);

            // ‚úÖ Buscar dados completos do usu√°rio no banco
            Optional<Usuario> usuarioOpt = usuarioRepository.findById(Long.valueOf(userId));

            if (usuarioOpt.isEmpty()) {
                System.err.println("‚ùå AuthController: Usu√°rio n√£o encontrado ap√≥s autentica√ß√£o");
                Map<String, String> errorResponse = new HashMap<>();
                errorResponse.put("message", "Erro interno: usu√°rio n√£o encontrado");
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
            }

            Usuario usuario = usuarioOpt.get();

            System.out.println("‚úÖ AuthController: Usu√°rio autenticado: " + usuario.getEmail());

            // ‚úÖ Criar resposta com dados completos do usu√°rio
            AuthResponseDTO authResponse = new AuthResponseDTO(
                    usuario.getId(),
                    usuario.getNome(),        // ‚Üê Nome completo "Rafael Rios"
                    usuario.getEmail(),       // ‚Üê Email "rafaelrios@gmail.com"
                    usuario.getNomeUsuario(), // ‚Üê Username "r.rios"
                    usuario.getXp() != 0 ? usuario.getXp() : 0,     // ‚úÖ XP com fallback
                    usuario.getNivel() != 0 ? usuario.getNivel() : 1 // ‚úÖ N√≠vel com fallback
            );

            System.out.println("üìã AuthController: Dados do usu√°rio processados:");
            System.out.println("   ID: " + authResponse.getId());
            System.out.println("   Nome: " + authResponse.getNome());
            System.out.println("   Email: " + authResponse.getEmail());
            System.out.println("   Username: " + authResponse.getNomeUsuario());
            System.out.println("   XP: " + authResponse.getXp());
            System.out.println("   N√≠vel: " + authResponse.getNivel());

            // ‚úÖ Estrutura de resposta padronizada
            Map<String, Object> response = new HashMap<>();
            response.put("token", token);
            response.put("user", authResponse); // ‚Üê Dados completos aqui

            System.out.println("‚úÖ AuthController: Login bem-sucedido para: " + usuario.getEmail());

            return ResponseEntity.ok(response);

        } catch (org.springframework.security.authentication.BadCredentialsException e) {
            System.err.println("‚ùå AuthController: Credenciais inv√°lidas para: " + request.getEmail());
            Map<String, String> errorResponse = new HashMap<>();
            errorResponse.put("message", "Credenciais inv√°lidas");
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(errorResponse);

        } catch (Exception e) {
            System.err.println("‚ùå AuthController: Erro inesperado: " + e.getMessage());
            e.printStackTrace();

            Map<String, String> errorResponse = new HashMap<>();
            errorResponse.put("message", "Erro interno do servidor");
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }
}